MODULE main

INVARSPEC ("self.out" < 0ud16_4);

INVARSPEC ("self.out" = 0ud16_4);

-- ASSUMPTIONS
INVAR ((! "en_clr") -> (! "self.clr"));

------------------------------------------------
-- BVAdd (in0, in1, out) = (a.in0, a.in1, a.out)
------------------------------------------------

VAR
"a.in0" : word[16];
"a.in1" : word[16];
"a.out" : word[16];

DEFINE
"a.in0_N" := next("a.in0");
"a.in1_N" := next("a.in1");
"a.out_N" := next("a.out");

INVAR
(("a.in0" + "a.in1") = "a.out");

------------------------------------------------

--------------------------------------------------------------------------------------
-- Mux (in0, in1, sel, out) = (r.clrMux.in0, r.clrMux.in1, r.clrMux.sel, r.clrMux.out)
--------------------------------------------------------------------------------------

VAR
"r.clrMux.in0" : word[16];
"r.clrMux.in1" : word[16];
"r.clrMux.out" : word[16];
"r.clrMux.sel" : boolean;

DEFINE
"r.clrMux.in0_N" := next("r.clrMux.in0");
"r.clrMux.in1_N" := next("r.clrMux.in1");
"r.clrMux.out_N" := next("r.clrMux.out");
"r.clrMux.sel_N" := next("r.clrMux.sel");

INVAR
("r.clrMux.out" = ((! "r.clrMux.sel") ? "r.clrMux.in0" : "r.clrMux.in1"));

--------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
-- Reg (in, clk, clr, rst, arst, out) = (r.reg0.in, r.reg0.clk, None, None, None, r.reg0.out)
---------------------------------------------------------------------------------------------

VAR
"r.reg0.in" : word[16];
"r.reg0.clk" : boolean;
"r.reg0.out" : word[16];

DEFINE
"r.reg0.in_N" := next("r.reg0.in");
"r.reg0.clk_N" := next("r.reg0.clk");
"r.reg0.out_N" := next("r.reg0.out");

INIT
("r.reg0.out" = 0ud16_0);

TRANS
("r.reg0.out_N" = (((! "r.reg0.clk") & "r.reg0.clk_N") ? "r.reg0.in" : "r.reg0.out"));

---------------------------------------------------------------------------------------------

---------------------------
-- Clock (clk) = (self.clk)
---------------------------

VAR
"self.clk" : boolean;

DEFINE
"self.clk_N" := next("self.clk");

INIT
(! "self.clk");

TRANS
(("self.clk" -> (! "self.clk_N")) & ((! "self.clk") -> "self.clk_N"));

---------------------------

--------------
-- Connections
--------------

VAR
"self.clr" : boolean;
"self.out" : word[16];

DEFINE
"self.clr_N" := next("self.clr");
"self.out_N" := next("self.out");

INVAR
(("r.reg0.out" = "self.out") & ("r.reg0.clk" <-> "self.clk") & ("r.clrMux.in1" = 0ud16_0) & ("a.in0" = 0ud16_1) & ("a.in1" = "r.reg0.out") & ("r.clrMux.out" = "r.reg0.in") & ("r.clrMux.sel" <-> "self.clr") & ("a.out" = "r.clrMux.in0"));

--------------

--------------------
-- Additional system
--------------------

VAR
"en_clr" : boolean;

DEFINE
"en_clr_N" := next("en_clr");

INIT
(! "en_clr");

TRANS
(("en_clr" -> "en_clr_N") & ((! "en_clr") -> ((0ud16_5 < "self.out") <-> "en_clr_N")));

--------------------

--------------------
-- Additional system
--------------------

VAR
"_-_state_id_-_" : word[2];

DEFINE
"_-_state_id_-__N" := next("_-_state_id_-_");

INIT
((! "en_clr") & ("_-_state_id_-_" = 0ud2_0));

INVAR
(("_-_state_id_-_" <= 0ud2_3) & (("_-_state_id_-_" = 0ud2_3) -> (! "en_clr")) & (("_-_state_id_-_" = 0ud2_1) -> (! "en_clr")) & (("_-_state_id_-_" = 0ud2_0) -> (! "en_clr")));

TRANS
((("_-_state_id_-_" = 0ud2_1) -> (("_-_state_id_-__N" = 0ud2_2) | ("_-_state_id_-__N" = 0ud2_1))) & (("_-_state_id_-_" = 0ud2_2) -> ("_-_state_id_-__N" = 0ud2_2)) & (("_-_state_id_-_" = 0ud2_3) -> ("_-_state_id_-__N" = 0ud2_1)) & (("_-_state_id_-_" = 0ud2_0) -> ("_-_state_id_-__N" = 0ud2_3)));

--------------------
