MODULE main

INVARSPEC ("count0.r.reg0.out" < 0ud16_18);

INVARSPEC ("count0.r.reg0.out" = "count1.r.reg0.out");

INVARSPEC ("count0.r.reg0.out" = 0ud16_5);

---------------------------------------------------------------------
-- BVAdd (in0, in1, out) = (count0.a.in0, count0.a.in1, count0.a.out)
---------------------------------------------------------------------

VAR
"count0.a.in0" : word[16];
"count0.a.in1" : word[16];
"count0.a.out" : word[16];

DEFINE
"count0.a.in0_N" := next("count0.a.in0");
"count0.a.in1_N" := next("count0.a.in1");
"count0.a.out_N" := next("count0.a.out");

INVAR
(("count0.a.in0" + "count0.a.in1") = "count0.a.out");

---------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
-- Mux (in0, in1, sel, out) = (count0.r.clrMux.in0, count0.r.clrMux.in1, count0.r.clrMux.sel, count0.r.clrMux.out)
------------------------------------------------------------------------------------------------------------------

VAR
"count0.r.clrMux.in0" : word[16];
"count0.r.clrMux.in1" : word[16];
"count0.r.clrMux.out" : word[16];
"count0.r.clrMux.sel" : word[1];

DEFINE
"count0.r.clrMux.in0_N" := next("count0.r.clrMux.in0");
"count0.r.clrMux.in1_N" := next("count0.r.clrMux.in1");
"count0.r.clrMux.out_N" := next("count0.r.clrMux.out");
"count0.r.clrMux.sel_N" := next("count0.r.clrMux.sel");

INVAR
("count0.r.clrMux.out" = (("count0.r.clrMux.sel" = 0ud1_0) ? "count0.r.clrMux.in0" : "count0.r.clrMux.in1"));

------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
-- Reg (in, clk, clr, rst, arst, out) = (count0.r.reg0.in, count0.r.reg0.clk, None, None, None, count0.r.reg0.out)
------------------------------------------------------------------------------------------------------------------

VAR
"count0.r.reg0.in" : word[16];
"count0.r.reg0.clk" : word[1];
"count0.r.reg0.out" : word[16];

DEFINE
"count0.r.reg0.in_N" := next("count0.r.reg0.in");
"count0.r.reg0.clk_N" := next("count0.r.reg0.clk");
"count0.r.reg0.out_N" := next("count0.r.reg0.out");

INIT
("count0.r.reg0.out" = 0ud16_0);

TRANS
("count0.r.reg0.out_N" = ((("count0.r.reg0.clk" = 0ud1_0) & ("count0.r.reg0.clk_N" = 0ud1_1)) ? "count0.r.reg0.in" : "count0.r.reg0.out"));

------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------
-- BVAdd (in0, in1, out) = (count1.a.in0, count1.a.in1, count1.a.out)
---------------------------------------------------------------------

VAR
"count1.a.in0" : word[16];
"count1.a.in1" : word[16];
"count1.a.out" : word[16];

DEFINE
"count1.a.in0_N" := next("count1.a.in0");
"count1.a.in1_N" := next("count1.a.in1");
"count1.a.out_N" := next("count1.a.out");

INVAR
(("count1.a.in0" + "count1.a.in1") = "count1.a.out");

---------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
-- Mux (in0, in1, sel, out) = (count1.r.clrMux.in0, count1.r.clrMux.in1, count1.r.clrMux.sel, count1.r.clrMux.out)
------------------------------------------------------------------------------------------------------------------

VAR
"count1.r.clrMux.in0" : word[16];
"count1.r.clrMux.in1" : word[16];
"count1.r.clrMux.out" : word[16];
"count1.r.clrMux.sel" : word[1];

DEFINE
"count1.r.clrMux.in0_N" := next("count1.r.clrMux.in0");
"count1.r.clrMux.in1_N" := next("count1.r.clrMux.in1");
"count1.r.clrMux.out_N" := next("count1.r.clrMux.out");
"count1.r.clrMux.sel_N" := next("count1.r.clrMux.sel");

INVAR
("count1.r.clrMux.out" = (("count1.r.clrMux.sel" = 0ud1_0) ? "count1.r.clrMux.in0" : "count1.r.clrMux.in1"));

------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
-- Reg (in, clk, clr, rst, arst, out) = (count1.r.reg0.in, count1.r.reg0.clk, None, None, None, count1.r.reg0.out)
------------------------------------------------------------------------------------------------------------------

VAR
"count1.r.reg0.in" : word[16];
"count1.r.reg0.clk" : word[1];
"count1.r.reg0.out" : word[16];

DEFINE
"count1.r.reg0.in_N" := next("count1.r.reg0.in");
"count1.r.reg0.clk_N" := next("count1.r.reg0.clk");
"count1.r.reg0.out_N" := next("count1.r.reg0.out");

INIT
("count1.r.reg0.out" = 0ud16_0);

TRANS
("count1.r.reg0.out_N" = ((("count1.r.reg0.clk_N" = 0ud1_1) & ("count1.r.reg0.clk" = 0ud1_0)) ? "count1.r.reg0.in" : "count1.r.reg0.out"));

------------------------------------------------------------------------------------------------------------------

---------------------------
-- Clock (clk) = (self.clk)
---------------------------

VAR
"self.clk" : word[1];

DEFINE
"self.clk_N" := next("self.clk");

INIT
("self.clk" = 0ud1_0);

TRANS
((("self.clk" = 0ud1_1) -> ("self.clk_N" = 0ud1_0)) & (("self.clk" = 0ud1_0) -> ("self.clk_N" = 0ud1_1)));

---------------------------

--------------
-- Connections
--------------

INVAR
(("count1.a.out" = "count1.r.clrMux.in0") & ("count0.r.reg0.clk" = "self.clk") & ("count0.a.out" = "count0.r.clrMux.in0") & ("count0.r.clrMux.out" = "count0.r.reg0.in") & ("count0.r.clrMux.sel" = "count1.r.reg0.out"[8:8]) & ("count1.r.reg0.clk" = "self.clk") & ("count0.a.in0" = 0ud16_1) & ("count1.r.clrMux.in1" = 0ud16_0) & ("count0.a.in1" = "count0.r.reg0.out") & ("count1.a.in0" = 0ud16_1) & ("count1.r.clrMux.sel" = "count1.r.reg0.out"[4:4]) & ("count1.a.in1" = "count1.r.reg0.out") & ("count1.r.clrMux.out" = "count1.r.reg0.in") & ("count0.r.clrMux.in1" = 0ud16_0));

--------------
