INPUT
 input: BV(8);
 read: BV(1);
 write: BV(1);

OUTPUT
 output: BV(8);

VAR
 clk: BV(1);
 fifo_1: FIFO(input, output, clk, read, write);

INIT
clk = 0_1;

TRANS
(clk = 0_1) <-> (next(clk) = 1_1);


DEF FIFO(in: BV(8), out: BV(8), clk: BV(1), read: BV(1), write: BV(1)):
  STATE
  cell_0: BV(8);
  cell_1: BV(8);
  cell_2: BV(8);
  cell_3: BV(8);
  cell_4: BV(8);
  cell_5: BV(8);

  VAR
    size: BV(3);

  INIT
    size = 0_3;
    cell_0 = 0_8;
    cell_1 = 0_8;
    cell_2 = 0_8;
    cell_3 = 0_8;
    cell_4 = 0_8;
    cell_5 = 0_8;

  INVAR
    out = ((size = 0_3) ? cell_0 : ((size = 1_3) ? cell_1 : ((size = 2_3) ? cell_2 : ((size = 3_3) ? cell_3 : ((size = 4_3) ? cell_4 : cell_5)))));

  TRANS
  (posedge(clk) & (write = 1_1)) -> (next(cell_0) = in) & (next(cell_1) = cell_0) & (next(cell_2) = cell_1)  & (next(cell_3) = cell_2) & (next(cell_4) = cell_3) & (next(cell_5) = cell_4);
  (!(posedge(clk)) | (write = 0_1)) -> nochange(cell_0) & nochange(cell_1) & nochange(cell_2) & nochange(cell_3) & nochange(cell_4) & nochange(cell_5);

  (posedge(clk) & (read = 1_1) & (write = 0_1) & (size > 0_3)) -> (next(size) = (size - 1_3));
  (posedge(clk) & (read = 1_1) & (write = 0_1) & (size = 0_3)) -> (next(size) = size);

  (posedge(clk) & (write = 1_1) & (size < 5_3)) -> (next(size) = (size + 1_3));
  (posedge(clk) & (write = 1_1) & (size = 5_3)) -> (next(size) = size);

  (((read = 0_1) & (write = 0_1)) | negedge(clk)) -> (next(size) = size);
